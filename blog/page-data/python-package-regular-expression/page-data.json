{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-package-regular-expression/","result":{"data":{"site":{"siteMetadata":{"title":"earlyster Blog"}},"markdownRemark":{"id":"7ba1b48f-11e9-58fc-9a28-26082e9fd309","excerpt":"I was able to use the python import statement to pull in the re package. Once I did this I was able to find patterns in content using high level method search…","html":"<p>I was able to use the python import statement to pull in the <a href=\"https://docs.python.org/3/library/re.html\">re package</a>. Once I did this I was able to find patterns in content using high level method search() or lower level  methods such as compile, match and group(s). </p>\n<p>After reading the documentation I was able to create a simple class that would validate a phone number to ensure it has the the following format 3 digits then a hyphen then 3 additional digits and hyphen followed by 4 additional digits. ###-###-####. I first used the following regular expression and compiled it once so I didn’t compile it on every example. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">matcher <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'^(\\d{3})-(\\d{3})-(\\d{4})$'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>One note is that I tried using a shorter regular expression since <code class=\"language-text\">\\d{3}</code> is repeated in the pattern. I had issues with this because I wanted to be able to get the area code as group 1 but was not able to do that since grouping gives the last pattern match so it would always give the second match or the prefix not the area code.</p>\n<p>To see if the content has a match I used the matcher variable and ran the match method</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> matcher<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The result of the match method would give me None or a Match instance which I can use to get the groups. Since I am using parenthesis in my regular expression I can access the area code or first 3 digits after the match.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># can be accessed using</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"area code\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here is the entire class I wrote </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\n    Using re - regular expression library in python\n\n    you can use this library to perform sequence matches such as matching the\n    format of a phone number, words in a list without any space or punctuation.\n\n    https://docs.python.org/3/library/re.html\n\n\"\"\"</span>\n<span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PhoneNumberFormat</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\">## Use the re library to compile the regular expression to match a U.S.</span>\n    <span class=\"token comment\">## phone number format of -  ###-###-####</span>\n    matcher <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'^(\\d{3})-(\\d{3})-(\\d{4})$'</span><span class=\"token punctuation\">)</span>\n    areaCode <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> phone_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> phone_number\n\n    <span class=\"token comment\">## Match phone number format ###-###-####</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isValidPhoneNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        groups <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getPhoneNumberMatches<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># after a match we can check if the value is not None and return true</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>groups <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># you can use the group function to access the first match of the </span>\n            <span class=\"token comment\"># expression (\\d{3})</span>\n            self<span class=\"token punctuation\">.</span>areaCode <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getPhoneNumberMatches</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>matcher<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> \"Is Valid Phone Number? <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n\\\n        Area code<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>isValidPhoneNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>areaCode<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"555-666-7777\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"111-666-7777\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"555-55-5555\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"555-555-53355\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"%%%%555-555-5555\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"555-555-5555^^^^\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>PhoneNumberFormat<span class=\"token punctuation\">(</span><span class=\"token string\">\"%$^&amp;-#$%-@#$%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The resulting output is</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">Is Valid Phone Number? True\n        Area code: 555\nIs Valid Phone Number? True\n        Area code: 111\nIs Valid Phone Number? False\n        Area code: unknown\nIs Valid Phone Number? False\n        Area code: unknown\nIs Valid Phone Number? False\n        Area code: unknown\nIs Valid Phone Number? False\n        Area code: unknown\nIs Valid Phone Number? False\n        Area code: unknown</code></pre></div>\n<p>Next steps:</p>\n<p>Could improve this to support different common telephone formats such as 1 (XXX) XXX-XXXX.</p>","frontmatter":{"title":"Python Importing Regular Expression package","date":"January 19, 2021","description":"Learning about the regular expression (re) python package"}},"previous":{"fields":{"slug":"/first-entry/"},"frontmatter":{"title":"First Entry"}},"next":null},"pageContext":{"id":"7ba1b48f-11e9-58fc-9a28-26082e9fd309","previousPostId":"1fbe09d4-e1fe-5b0e-88e9-8e86bb066ce0","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}